/*
 * This file is generated by jOOQ.
 */
package ro.msg.poc.images.db.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ro.msg.poc.images.db.tables.Image;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageRecord extends UpdatableRecordImpl<ImageRecord> implements Record3<String, String, byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.image.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.image.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.image.mime</code>.
     */
    public void setMime(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.image.mime</code>.
     */
    public String getMime() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.image.body</code>.
     */
    public void setBody(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.image.body</code>.
     */
    public byte[] getBody() {
        return (byte[]) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, byte[]> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Image.IMAGE.ID;
    }

    @Override
    public Field<String> field2() {
        return Image.IMAGE.MIME;
    }

    @Override
    public Field<byte[]> field3() {
        return Image.IMAGE.BODY;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getMime();
    }

    @Override
    public byte[] component3() {
        return getBody();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getMime();
    }

    @Override
    public byte[] value3() {
        return getBody();
    }

    @Override
    public ImageRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public ImageRecord value2(String value) {
        setMime(value);
        return this;
    }

    @Override
    public ImageRecord value3(byte[] value) {
        setBody(value);
        return this;
    }

    @Override
    public ImageRecord values(String value1, String value2, byte[] value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ImageRecord
     */
    public ImageRecord() {
        super(Image.IMAGE);
    }

    /**
     * Create a detached, initialised ImageRecord
     */
    public ImageRecord(String id, String mime, byte[] body) {
        super(Image.IMAGE);

        setId(id);
        setMime(mime);
        setBody(body);
    }
}
